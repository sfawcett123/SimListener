name: Build/Test/Deploy
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  test:
    name: Test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
    
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 7.0.x
    
      - name: Install dotnet-sonarscanner
        run:  dotnet tool install --global dotnet-sonarscanner
    
      - name: Restore
        run:  dotnet restore
       
      - name: Test
        run:  |
                dotnet sonarscanner begin /k:"sfawcett123_SimListener" /o:"sfawcett123" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="SimListenerTest/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="SimListenerTest/TestResults/*.trx"
                dotnet build --no-incremental --nologo 
                dotnet test --no-build --logger:trx  -e:CollectCoverage=true -e:CoverletOutputFormat=opencover
                dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Code Coverage Report
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV }}
          files: SimListenerTest/coverage.opencover.xml
    
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
           trx_files: "SimListenerTest/TestResults/*.trx"
           
  package:
    name: Package
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 7.0.x
            
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Create Nuget Package
        run: |
             dotnet build -c Release -p:Version=${{ steps.tag_version.outputs.new_version }} 

      - name: Upload Package for Publishing
        uses: actions/upload-artifact@v3
        with:
          name: PackedLib
          path: SimListener/bin/x64/Release/*.nupkg
          
  github-publish:
    needs: package
    name: Publish to Github
    runs-on: ubuntu-latest
    steps:
    - name: Download built project  
      uses: actions/download-artifact@v3
      with:
        name: PackedLib
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
        
    - name: Push Package to GitHub
      run: dotnet nuget push --api-key ${{secrets.GITHUB_TOKEN}} --source "https://nuget.pkg.github.com/sfawcett123/index.json" *.nupkg

  nuget-publish:
    needs: package
    name: Publish to Nuget
    runs-on: ubuntu-latest
    steps:
    - name: Download built project  
      uses: actions/download-artifact@v3
      with:
        name: PackedLib
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
        
    - name: Push Package to Nuget
      run: dotnet nuget push --api-key ${{secrets.NUGET_API_KEY}} --source "https://api.nuget.org/v3/index.json" *.nupkg
